import React, { useEffect } from "react";
import { useSelector, useDispatch } from "react-redux";
import qs from "qs";
import { useNavigate } from "react-router-dom";

import {
  Categories,
  PizzaBlock,
  PizzaBlockSkeleton,
  Sort,
  sortList,
  Pagination,
} from "../components/";

import { setCurrentPage, setFilters } from "../redux/slices/filterSlice";
import { fetchPizzas } from "../redux/slices/pizzaSlice";
import { AppDispatch, RootState } from "../redux/store";
import { Pizza } from "../types";

const Home: React.FC = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch<AppDispatch>();

  const isSearch = React.useRef(false);
  const isMounted = React.useRef(false);

  const { categoryId, sort, currentPage } = useSelector(
    (state: RootState) => state.filter
  );
  const { items, status } = useSelector((state: RootState) => state.pizza);
  const searchValue = useSelector(
    (state: RootState) => state.filter.searchValue
  );

  const onChangePage = (number: number) => {
    dispatch(setCurrentPage(number));
  };

  const getPizzas = React.useCallback(async () => {
    const category = categoryId > 0 ? `category=${categoryId}` : "";
    const search = searchValue ? `&search=${searchValue}` : "";
    const sortBy = sort.sortProperty.replace("-", "");
    const order = sort.sortProperty.includes("-") ? "asc" : "desc";
    try {
      await dispatch(
        fetchPizzas({ category, search, sortBy, order, currentPage })
      );

      window.scrollTo(0, 0);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Ü—Ü:", error);
    }
  }, [categoryId, searchValue, sort.sortProperty, dispatch, currentPage]);

  // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö –≤ —Å—Ç–µ–π—Ç–µ Redux
  React.useEffect(() => {
    if (window.location.search) {
      const params = qs.parse(window.location.search.substring(1)) as {
        categoryId?: string;
        currentPage?: string;
        sortProperty?: string;
      };

      dispatch(
        setFilters({
          categoryId: Number(params.categoryId) || 0,
          currentPage: Number(params.currentPage) || 1,
          sort:
            sortList.find((obj) => obj.sortProperty === params.sortProperty) ||
            sortList[0],
        })
      );
      isSearch.current = true;
    }
  }, [dispatch]);

  // –ï—Å–ª–∏ –±—ã–ª –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —Ç–æ –ø–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å—Ç—Ä–æ–∫—É –∏ –ø–µ—Ä–µ–¥–∞–µ–º –≤ URL
  useEffect(() => {
    if (isMounted.current) {
      const queryString = qs.stringify({
        sortProperty: sort.sortProperty,
        categoryId,
        currentPage,
      });

      navigate(`?${queryString}`);
    }
    isMounted.current = true;
  }, [categoryId, sort, searchValue, currentPage, navigate]);

  // –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API
  useEffect(() => {
    if (!isSearch.current) {
      getPizzas();
    }

    isSearch.current = false;
  }, [categoryId, sort, searchValue, currentPage, getPizzas]);

  const pizzaSkeletons = Array.from({ length: 4 }).map((_, index) => (
    <PizzaBlockSkeleton key={index} />
  ));
  const pizzas = items.map((item: Pizza) => (
    <PizzaBlock key={item.id} {...item} />
  ));

  return (
    <>
      <div className="content__top">
        <Categories />
        <Sort />
      </div>

      {status === "error" ? (
        <div className="content__error">
          <h2>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∏—Ü—Ü—ã üòï</h2>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.</p>
        </div>
      ) : (
        <>
          <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
          <div className="content__items">
            {status === "loading" ? (
              pizzaSkeletons
            ) : items.length > 0 ? (
              pizzas
            ) : (
              <h3 className="content__subtitle_empty">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï</h3>
            )}
          </div>
          <Pagination onChangePage={onChangePage} />
        </>
      )}
    </>
  );
};

export default Home;
